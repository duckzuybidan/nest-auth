generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  passwordHash  String
  isActive      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  roles         UserRole[]
}

model RefreshToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  tokenHash String    
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  revokedAt DateTime?

  @@index([tokenHash, expiresAt, revokedAt])
}

model Role {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  name String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.ObjectId
}

model Permission {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  action PermissionAction   
  resource PermissionResource
  description String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roles RolePermission[]

  @@unique([action, resource])
}

model RolePermission {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   String @db.ObjectId
  permission Permission @relation(fields: [permissionId], references: [id])
  permissionId String @db.ObjectId
}

enum PermissionAction {
  read
  write
}

enum PermissionResource {
  admin
}